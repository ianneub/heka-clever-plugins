-- This Source Code Form is subject to the terms of the Mozilla Public
-- License, v. 2.0. If a copy of the MPL was not distributed with this
-- file, You can obtain one at http://mozilla.org/MPL/2.0/.

--[=[
Extracts data from message fields in messages generated by a
and generates JSON suitable for use with the StatHat EZ 
API <https://www.stathat.com/manual/send>`_.

Config:

- fields (string, required, defaults to "")
    A ` ` seperated list of Fields whose values will be used at the start of the metric name. 
    Other fields values will be appended after in alphabetical order.
    eg. "source title" will use the metric name of %title% %source%.
- ezkey (string, required, defaults to "")
- field_seperator (string, optional, defaults to " ")
    Character used to join the fields used in the metric name.
    eg. fields as "source title" with field_seperator = "." will use the metric name of %title%.%source%.


*Example Heka Configuration*

.. code-block:: ini

    [stathat-encoder]
    type = "SandboxEncoder"
    filename = "lua_encoders/stathat.lua"
       [stathat-encoder.config]
       fields = "title source"
       ezkey = "stathat-ez-api-key"
       field_seperator = "."

    [stathat]
    type = "HttpOutput"
    message_matcher = "Type == 'json'"
    address = "http://api.stathat.com/ez"
    encoder = "stathat-encoder"
      [stathat.headers]
      content-type = ["application/json"]

*Example Output*

.. code-block:: json
{"data":[{"t":1429932416,"stat":"test.counter","count":2}],"ezkey":"stathat-ez-api-key"}
--]=]

require "cjson"
require "table"
require "string"


local fields_config = read_config("fields")
local ezkey = read_config("ezkey")
local field_seperator= read_config("field_seperator") or " "

local fields = {}
for f in string.gmatch(fields_config, '([^ ]+)') do
    if f ~= "" and f ~= nil then
        fields[f] = true
    end
end

function metric_name()
    local names = {}
    for key, _ in pairs(fields) do
        local val = read_message("Fields[".. key .."]")
        if val then
            table.insert(names, val)
        end
    end

    return table.concat(names, field_seperator)
end

function process_message()
    local ts = read_message("Timestamp") / 1e9
    if not ts then return -1 end
    local value = read_message("Fields[value]")

    local stat_type = read_message("Fields[type]")
    -- assume type is gauge unless counter is specified
    -- if stat_type is null then just count the event
    if not stat_type or stat_type == "counter" then
        stat_type = "count"
        if not value then value = 1 end
    else
        stat_type = "value" -- aka "gauge"
        if not value then return -1 end
    end

    -- only process name if everything looks good
    local name = metric_name()
    if not name or name == "" then return -1 end

    local output = {
        ezkey = ezkey,
        data = {{
            stat = name,
            [stat_type] = value,
            t = ts
        }}
    }

    inject_payload("json", "stathat", cjson.encode(output))
    return 0
end
