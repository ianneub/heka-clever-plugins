-- This Source Code Form is subject to the terms of the Mozilla Public
-- License, v. 2.0. If a copy of the MPL was not distributed with this
-- file, You can obtain one at http://mozilla.org/MPL/2.0/.

--[=[
Extracts data from message fields in messages generated by a
and generates JSON suitable for use with the Librato
's `HTTP API
<http://dev.librato.com/v1>`_.
As of now, this encoder assumes that stats prefixes `global_prefix` 
and `statsd_prefix` are set to their defaults.

Config:

- name_fields (string, optional, defaults to title)
    A `.` seperated list of Fields that will be used to construct the librato metric name
    eg. "name.id.type" will attempt to pull out `Fields[name].Fields[is][Fields[type]`

*Example Heka Configuration*

.. code-block:: ini

    [librato-encoder]
    type = "SandboxEncoder"
    filename = "lua_encoders/schema_librato.lua"
       [librato-encoder.config]
       name_fields = "name.app.type"

    [librato]
    type = "HttpOutput"
    message_matcher = "Type == 'heka.statmetric'"
    address = "https://metrics-api.librato.com/v1/metrics"
    encoder = "librato-encoder"
    username = "librato_username"
    password = "librato_api_key"

*Example Output*

.. code-block:: json

    {"gauges":{ "time_taken.video_encoding.mpeg" : {"value":441267,"measure_time":1417413408,"source":"0a5a7339e657"}}}

--]=]

require "cjson"
require "table"
require "string"

local stat_types = { gauges=true, counters=true }
local name_fields = read_config("name_fields") or 'title'

function metric_name()
    local values = {}
    for field in string.gmatch(name_fields, "%a+") do
        local val = read_message("Fields[".. field .."]")
        if val then
            table.insert(values, val)
        end
    end

    return table.concat(values, '.')
end

function process_message()
    local ts = read_message("Timestamp") / 1e9
    local hostname = read_message("Hostname")

    local stat_type = read_message("Fields[stat]")
    local value = read_message("Fields[value]")

    if not ts or not value then return -1 end
    if not stat_types[stat_type] then return -1 end
    -- only process name if everything looks good
    local name = metric_name()
    if not name or name == "" then return -1 end

    local output = {
        [stat_type] = {
            [name] = {
                value = value,
                source = hostname,
                measure_time = ts
            }
        }
    }

    inject_payload("json", "librato_stats", cjson.encode(output))
    return 0
end
